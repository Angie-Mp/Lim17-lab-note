{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/Lim17-lab-note/src/components/EnterApp/Home/Crud/Edit.js\",\n    _s = $RefreshSig$();\n\n//import Modal from \"./Modal\"\nimport { useState } from 'react';\nimport { doc, updateDoc } from \"firebase/firestore\";\nimport { db } from '../../../../firebase/connection.js';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditTask(_ref) {\n  _s();\n\n  let {\n    open,\n    onClose,\n    toEditTitle,\n    toEditDescription,\n    id\n  } = _ref;\n  const [title, setTitle] = useState(toEditTitle);\n  const [description, setDescription] = useState(toEditDescription); // function to update firestore \n\n  const handleUpdate = async e => {\n    e.preventDefault();\n    const taskDocRef = doc(db, 'notas', id);\n\n    try {\n      await updateDoc(taskDocRef, {\n        title: title,\n        description: description\n      });\n      onClose();\n    } catch (err) {\n      alert(err);\n    }\n  }; /////////////\n\n\n  const DEFAULT_INPUT_TEXT = \"\";\n\n  class MyInput extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        text: DEFAULT_INPUT_TEXT\n      };\n    }\n\n    changeText(e) {\n      let text = e.target.value;\n      this.setState({\n        text\n      });\n      swal.setActionValue(text);\n    }\n\n    render() {\n      return /*#__PURE__*/_jsxDEV(\"input\", {\n        value: this.state.text,\n        onChange: this.changeText.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this);\n    }\n\n  } // We want to retrieve MyInput as a pure DOM node: \n\n\n  let wrapper = document.createElement('div');\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(MyInput, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 19\n  }, this), wrapper);\n  let el = wrapper.firstChild;\n  swal({\n    text: \"Write something here:\",\n    content: el,\n    buttons: {\n      confirm: {\n        /*\n         * We need to initialize the value of the button to\n         * an empty string instead of \"true\":\n         */\n        value: DEFAULT_INPUT_TEXT\n      }\n    }\n  }).then(value => {\n    swal(`You typed: ${value}`);\n  }); /////\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleUpdate,\n    className: \"editTask\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"title\",\n      onChange: e => setTitle(e.target.value.toUpperCase()),\n      value: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      onChange: e => setDescription(e.target.value),\n      value: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Editar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 7\n  }, this);\n}\n\n_s(EditTask, \"TchmB0De3CMtZxroHivBEqMixPE=\");\n\n_c = EditTask;\nexport default EditTask;\n/*\n\n\n//import Modal from \"./Modal\"\nimport {useState} from 'react'\nimport { doc, updateDoc } from \"firebase/firestore\";\nimport {db} from '../../../../firebase/connection.js'\nimport Swal from 'sweetalert2'\n\n\nfunction EditTask({open, onClose, toEditTitle, toEditDescription, id}) {\n\n  const [title, setTitle] = useState(toEditTitle)\n  const [description, setDescription] = useState(toEditDescription)\n\n  // function to update firestore \n  const handleUpdate = async (e) => {\n    e.preventDefault()\n    const taskDocRef = doc(db, 'notas', id)\n    try{\n      await updateDoc(taskDocRef, {\n        title: title,\n        description: description\n      })\n      onClose()\n    } catch (err) {\n      alert(err)\n    }\n    \n  }\n  /////////////\n\n  /////\n  \n  return (\n      <form onSubmit={handleUpdate} className='editTask'>\n        <input type='text' name='title' onChange={(e) => setTitle(e.target.value.toUpperCase())} value={title}/>\n        <textarea onChange={(e) => setDescription(e.target.value)} value={description}></textarea>\n        <button type='submit'>Editar</button>\n      </form> \n  )\n\n}\n\nexport default EditTask\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"EditTask\");","map":{"version":3,"names":["useState","doc","updateDoc","db","Swal","EditTask","open","onClose","toEditTitle","toEditDescription","id","title","setTitle","description","setDescription","handleUpdate","e","preventDefault","taskDocRef","err","alert","DEFAULT_INPUT_TEXT","MyInput","Component","constructor","props","state","text","changeText","target","value","setState","swal","setActionValue","render","bind","wrapper","document","createElement","ReactDOM","el","firstChild","content","buttons","confirm","then","toUpperCase"],"sources":["/Users/mac/Documents/Lim17-lab-note/src/components/EnterApp/Home/Crud/Edit.js"],"sourcesContent":["//import Modal from \"./Modal\"\nimport {useState} from 'react'\nimport { doc, updateDoc } from \"firebase/firestore\";\nimport {db} from '../../../../firebase/connection.js'\nimport Swal from 'sweetalert2'\n\n\nfunction EditTask({open, onClose, toEditTitle, toEditDescription, id}) {\n\n  const [title, setTitle] = useState(toEditTitle)\n  const [description, setDescription] = useState(toEditDescription)\n\n  // function to update firestore \n  const handleUpdate = async (e) => {\n    e.preventDefault()\n    const taskDocRef = doc(db, 'notas', id)\n    try{\n      await updateDoc(taskDocRef, {\n        title: title,\n        description: description\n      })\n      onClose()\n    } catch (err) {\n      alert(err)\n    }\n    \n  }\n  /////////////\n\n  const DEFAULT_INPUT_TEXT = \"\";\n   \n  class MyInput extends Component {\n    constructor(props) {\n      super(props);\n   \n      this.state = {\n        text: DEFAULT_INPUT_TEXT,\n      };\n    }\n   \n    changeText(e) {\n      let text = e.target.value;\n   \n      this.setState({\n        text,\n      });\n      swal.setActionValue(text);\n    }\n   \n    render() {\n      return (\n        <input\n          value={this.state.text}\n          onChange={this.changeText.bind(this)}\n        />\n      )\n    }\n  }\n   \n  // We want to retrieve MyInput as a pure DOM node: \n  let wrapper = document.createElement('div');\n  ReactDOM.render(<MyInput />, wrapper);\n  let el = wrapper.firstChild;\n   \n  swal({\n    text: \"Write something here:\",\n    content: el,\n    buttons: {\n      confirm: {\n        /*\n         * We need to initialize the value of the button to\n         * an empty string instead of \"true\":\n         */\n        value: DEFAULT_INPUT_TEXT,\n      },\n    },\n  })\n  .then((value) => {\n    swal(`You typed: ${value}`);\n  });\n  /////\n  \n  return (\n  \n      <form onSubmit={handleUpdate} className='editTask'>\n      <input type='text' name='title' onChange={(e) => setTitle(e.target.value.toUpperCase())} value={title}/>\n      <textarea onChange={(e) => setDescription(e.target.value)} value={description}></textarea>\n      <button type='submit'>Editar</button>\n    </form> \n\n   \n  )\n\n}\n\nexport default EditTask\n\n\n\n\n/*\n\n\n//import Modal from \"./Modal\"\nimport {useState} from 'react'\nimport { doc, updateDoc } from \"firebase/firestore\";\nimport {db} from '../../../../firebase/connection.js'\nimport Swal from 'sweetalert2'\n\n\nfunction EditTask({open, onClose, toEditTitle, toEditDescription, id}) {\n\n  const [title, setTitle] = useState(toEditTitle)\n  const [description, setDescription] = useState(toEditDescription)\n\n  // function to update firestore \n  const handleUpdate = async (e) => {\n    e.preventDefault()\n    const taskDocRef = doc(db, 'notas', id)\n    try{\n      await updateDoc(taskDocRef, {\n        title: title,\n        description: description\n      })\n      onClose()\n    } catch (err) {\n      alert(err)\n    }\n    \n  }\n  /////////////\n\n  /////\n  \n  return (\n      <form onSubmit={handleUpdate} className='editTask'>\n        <input type='text' name='title' onChange={(e) => setTitle(e.target.value.toUpperCase())} value={title}/>\n        <textarea onChange={(e) => setDescription(e.target.value)} value={description}></textarea>\n        <button type='submit'>Editar</button>\n      </form> \n  )\n\n}\n\nexport default EditTask\n*/"],"mappings":";;;AAAA;AACA,SAAQA,QAAR,QAAuB,OAAvB;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,oBAA/B;AACA,SAAQC,EAAR,QAAiB,oCAAjB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;;AAGA,SAASC,QAAT,OAAuE;EAAA;;EAAA,IAArD;IAACC,IAAD;IAAOC,OAAP;IAAgBC,WAAhB;IAA6BC,iBAA7B;IAAgDC;EAAhD,CAAqD;EAErE,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAACQ,WAAD,CAAlC;EACA,MAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAACS,iBAAD,CAA9C,CAHqE,CAKrE;;EACA,MAAMM,YAAY,GAAG,MAAOC,CAAP,IAAa;IAChCA,CAAC,CAACC,cAAF;IACA,MAAMC,UAAU,GAAGjB,GAAG,CAACE,EAAD,EAAK,OAAL,EAAcO,EAAd,CAAtB;;IACA,IAAG;MACD,MAAMR,SAAS,CAACgB,UAAD,EAAa;QAC1BP,KAAK,EAAEA,KADmB;QAE1BE,WAAW,EAAEA;MAFa,CAAb,CAAf;MAIAN,OAAO;IACR,CAND,CAME,OAAOY,GAAP,EAAY;MACZC,KAAK,CAACD,GAAD,CAAL;IACD;EAEF,CAbD,CANqE,CAoBrE;;;EAEA,MAAME,kBAAkB,GAAG,EAA3B;;EAEA,MAAMC,OAAN,SAAsBC,SAAtB,CAAgC;IAC9BC,WAAW,CAACC,KAAD,EAAQ;MACjB,MAAMA,KAAN;MAEA,KAAKC,KAAL,GAAa;QACXC,IAAI,EAAEN;MADK,CAAb;IAGD;;IAEDO,UAAU,CAACZ,CAAD,EAAI;MACZ,IAAIW,IAAI,GAAGX,CAAC,CAACa,MAAF,CAASC,KAApB;MAEA,KAAKC,QAAL,CAAc;QACZJ;MADY,CAAd;MAGAK,IAAI,CAACC,cAAL,CAAoBN,IAApB;IACD;;IAEDO,MAAM,GAAG;MACP,oBACE;QACE,KAAK,EAAE,KAAKR,KAAL,CAAWC,IADpB;QAEE,QAAQ,EAAE,KAAKC,UAAL,CAAgBO,IAAhB,CAAqB,IAArB;MAFZ;QAAA;QAAA;QAAA;MAAA,QADF;IAMD;;EAzB6B,CAxBqC,CAoDrE;;;EACA,IAAIC,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAd;EACAC,QAAQ,CAACL,MAAT,eAAgB,QAAC,OAAD;IAAA;IAAA;IAAA;EAAA,QAAhB,EAA6BE,OAA7B;EACA,IAAII,EAAE,GAAGJ,OAAO,CAACK,UAAjB;EAEAT,IAAI,CAAC;IACHL,IAAI,EAAE,uBADH;IAEHe,OAAO,EAAEF,EAFN;IAGHG,OAAO,EAAE;MACPC,OAAO,EAAE;QACP;AACR;AACA;AACA;QACQd,KAAK,EAAET;MALA;IADF;EAHN,CAAD,CAAJ,CAaCwB,IAbD,CAaOf,KAAD,IAAW;IACfE,IAAI,CAAE,cAAaF,KAAM,EAArB,CAAJ;EACD,CAfD,EAzDqE,CAyErE;;EAEA,oBAEI;IAAM,QAAQ,EAAEf,YAAhB;IAA8B,SAAS,EAAC,UAAxC;IAAA,wBACA;MAAO,IAAI,EAAC,MAAZ;MAAmB,IAAI,EAAC,OAAxB;MAAgC,QAAQ,EAAGC,CAAD,IAAOJ,QAAQ,CAACI,CAAC,CAACa,MAAF,CAASC,KAAT,CAAegB,WAAf,EAAD,CAAzD;MAAyF,KAAK,EAAEnC;IAAhG;MAAA;MAAA;MAAA;IAAA,QADA,eAEA;MAAU,QAAQ,EAAGK,CAAD,IAAOF,cAAc,CAACE,CAAC,CAACa,MAAF,CAASC,KAAV,CAAzC;MAA2D,KAAK,EAAEjB;IAAlE;MAAA;MAAA;MAAA;IAAA,QAFA,eAGA;MAAQ,IAAI,EAAC,QAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHA;EAAA;IAAA;IAAA;IAAA;EAAA,QAFJ;AAWD;;GAtFQR,Q;;KAAAA,Q;AAwFT,eAAeA,QAAf;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}