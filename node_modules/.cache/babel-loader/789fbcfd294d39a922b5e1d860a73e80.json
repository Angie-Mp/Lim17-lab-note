{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/Lim17-lab-note/src/components/EnterApp/Home/Crud/Edit.js\";\n//import Modal from \"./Modal\"\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_INPUT_TEXT = \"\";\n\nclass EditTask extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: DEFAULT_INPUT_TEXT\n    };\n  }\n\n  changeText(e) {\n    let text = e.target.value;\n    this.setState({\n      text\n    });\n    /*\n     * This will update the value that the confirm\n     * button resolves to:\n     */\n\n    swal.setActionValue(text);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      value: this.state.text,\n      onChange: this.changeText.bind(this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n\n} // We want to retrieve MyInput as a pure DOM node: \n\n\nlet wrapper = document.createElement('div');\nReactDOM.render( /*#__PURE__*/_jsxDEV(MyInput, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 42,\n  columnNumber: 17\n}, this), wrapper);\nlet el = wrapper.firstChild;\nswal({\n  text: \"Write something here:\",\n  content: el,\n  buttons: {\n    confirm: {\n      /*\n       * We need to initialize the value of the button to\n       * an empty string instead of \"true\":\n       */\n      value: DEFAULT_INPUT_TEXT\n    }\n  }\n}).then(value => {\n  swal(`You typed: ${value}`);\n});\n/*\n\n\n//import Modal from \"./Modal\"\nimport {useState} from 'react'\nimport { doc, updateDoc } from \"firebase/firestore\";\nimport {db} from '../../../../firebase/connection.js'\nimport Swal from 'sweetalert2'\n\n\nfunction EditTask({open, onClose, toEditTitle, toEditDescription, id}) {\n\n  const [title, setTitle] = useState(toEditTitle)\n  const [description, setDescription] = useState(toEditDescription)\n\n  // function to update firestore \n  const handleUpdate = async (e) => {\n    e.preventDefault()\n    const taskDocRef = doc(db, 'notas', id)\n    try{\n      await updateDoc(taskDocRef, {\n        title: title,\n        description: description\n      })\n      onClose()\n    } catch (err) {\n      alert(err)\n    }\n    \n  }\n  /////////////\n\n  /////\n  \n  return (\n      <form onSubmit={handleUpdate} className='editTask'>\n        <input type='text' name='title' onChange={(e) => setTitle(e.target.value.toUpperCase())} value={title}/>\n        <textarea onChange={(e) => setDescription(e.target.value)} value={description}></textarea>\n        <button type='submit'>Editar</button>\n      </form> \n  )\n\n}\n\nexport default EditTask\n*/","map":{"version":3,"names":["React","Component","ReactDOM","DEFAULT_INPUT_TEXT","EditTask","constructor","props","state","text","changeText","e","target","value","setState","swal","setActionValue","render","bind","wrapper","document","createElement","el","firstChild","content","buttons","confirm","then"],"sources":["/Users/mac/Documents/Lim17-lab-note/src/components/EnterApp/Home/Crud/Edit.js"],"sourcesContent":["//import Modal from \"./Modal\"\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n \nconst DEFAULT_INPUT_TEXT = \"\";\n \nclass EditTask extends Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      text: DEFAULT_INPUT_TEXT,\n    };\n  }\n \n  changeText(e) {\n    let text = e.target.value;\n \n    this.setState({\n      text,\n    });\n \n    /*\n     * This will update the value that the confirm\n     * button resolves to:\n     */\n    swal.setActionValue(text);\n  }\n \n  render() {\n    return (\n      <input\n        value={this.state.text}\n        onChange={this.changeText.bind(this)}\n      />\n    )\n  }\n}\n \n// We want to retrieve MyInput as a pure DOM node: \nlet wrapper = document.createElement('div');\nReactDOM.render(<MyInput />, wrapper);\nlet el = wrapper.firstChild;\n \nswal({\n  text: \"Write something here:\",\n  content: el,\n  buttons: {\n    confirm: {\n      /*\n       * We need to initialize the value of the button to\n       * an empty string instead of \"true\":\n       */\n      value: DEFAULT_INPUT_TEXT,\n    },\n  },\n})\n.then((value) => {\n  swal(`You typed: ${value}`);\n});\n\n/*\n\n\n//import Modal from \"./Modal\"\nimport {useState} from 'react'\nimport { doc, updateDoc } from \"firebase/firestore\";\nimport {db} from '../../../../firebase/connection.js'\nimport Swal from 'sweetalert2'\n\n\nfunction EditTask({open, onClose, toEditTitle, toEditDescription, id}) {\n\n  const [title, setTitle] = useState(toEditTitle)\n  const [description, setDescription] = useState(toEditDescription)\n\n  // function to update firestore \n  const handleUpdate = async (e) => {\n    e.preventDefault()\n    const taskDocRef = doc(db, 'notas', id)\n    try{\n      await updateDoc(taskDocRef, {\n        title: title,\n        description: description\n      })\n      onClose()\n    } catch (err) {\n      alert(err)\n    }\n    \n  }\n  /////////////\n\n  /////\n  \n  return (\n      <form onSubmit={handleUpdate} className='editTask'>\n        <input type='text' name='title' onChange={(e) => setTitle(e.target.value.toUpperCase())} value={title}/>\n        <textarea onChange={(e) => setDescription(e.target.value)} value={description}></textarea>\n        <button type='submit'>Editar</button>\n      </form> \n  )\n\n}\n\nexport default EditTask\n*/"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,kBAAkB,GAAG,EAA3B;;AAEA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;EAC/BI,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;IAEA,KAAKC,KAAL,GAAa;MACXC,IAAI,EAAEL;IADK,CAAb;EAGD;;EAEDM,UAAU,CAACC,CAAD,EAAI;IACZ,IAAIF,IAAI,GAAGE,CAAC,CAACC,MAAF,CAASC,KAApB;IAEA,KAAKC,QAAL,CAAc;MACZL;IADY,CAAd;IAIA;AACJ;AACA;AACA;;IACIM,IAAI,CAACC,cAAL,CAAoBP,IAApB;EACD;;EAEDQ,MAAM,GAAG;IACP,oBACE;MACE,KAAK,EAAE,KAAKT,KAAL,CAAWC,IADpB;MAEE,QAAQ,EAAE,KAAKC,UAAL,CAAgBQ,IAAhB,CAAqB,IAArB;IAFZ;MAAA;MAAA;MAAA;IAAA,QADF;EAMD;;AA9B8B,C,CAiCjC;;;AACA,IAAIC,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAd;AACAlB,QAAQ,CAACc,MAAT,eAAgB,QAAC,OAAD;EAAA;EAAA;EAAA;AAAA,QAAhB,EAA6BE,OAA7B;AACA,IAAIG,EAAE,GAAGH,OAAO,CAACI,UAAjB;AAEAR,IAAI,CAAC;EACHN,IAAI,EAAE,uBADH;EAEHe,OAAO,EAAEF,EAFN;EAGHG,OAAO,EAAE;IACPC,OAAO,EAAE;MACP;AACN;AACA;AACA;MACMb,KAAK,EAAET;IALA;EADF;AAHN,CAAD,CAAJ,CAaCuB,IAbD,CAaOd,KAAD,IAAW;EACfE,IAAI,CAAE,cAAaF,KAAM,EAArB,CAAJ;AACD,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}