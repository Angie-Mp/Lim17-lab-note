{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/Lim17-lab-note/src/components/EnterApp/Home/Task.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react'; //import TaskItem from './TaskItem'\n\nimport EditTask from './Crud/Edit.js';\nimport { doc, updateDoc, deleteDoc } from \"firebase/firestore\";\nimport { db } from '../../../firebase/connection.js';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Task(_ref) {\n  _s();\n\n  let {\n    id,\n    title,\n    description,\n    completed,\n    toEditTitle,\n    toEditDescription\n  } = _ref;\n  ///////\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  } //////////\n\n\n  const [checked, setChecked] = useState(completed);\n  const [open, setOpen] = useState({\n    edit: false,\n    view: false\n  });\n\n  const handleClose = () => {\n    setOpen({\n      edit: false,\n      view: false\n    });\n  };\n  /* function to delete a document from firstore */\n\n\n  const handleDelete = async () => {\n    const taskDocRef = doc(db, 'notas', id);\n\n    try {\n      await deleteDoc(taskDocRef);\n    } catch (err) {\n      alert(err);\n    }\n  }; ///\n  ///\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `task ${checked && 'task--borderColor'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task__body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task__buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task__deleteNedit\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"task__editButton\",\n            onClick: () => setIsOpen({ ...open,\n              edit: true\n            }),\n            children: \"Editar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"task__deleteButton\",\n            onClick: handleDelete,\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), modalIsOpen.edit && /*#__PURE__*/_jsxDEV(EditTask, {\n      onClose: handleClose,\n      toEditTitle: title,\n      toEditDescription: description,\n      open: modalIsOpen.edit,\n      id: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Task, \"sZBp65Y1xgHPc3PkEozFoE2Fjtk=\");\n\n_c = Task;\nexport default Task;\n/*\nimport {useState} from 'react'\n//import TaskItem from './TaskItem'\nimport EditTask from './Crud/Edit.js'\nimport { doc, updateDoc, deleteDoc} from \"firebase/firestore\";\nimport {db} from '../../../firebase/connection.js'\n\nfunction Task({id, title, description, completed, toEditTitle,toEditDescription}) {\n\n  const [checked, setChecked] = useState(completed)\n  const [open, setOpen] = useState({edit:false, view:false})\n\n  const handleClose = () => {\n    setOpen({edit:false, view:false})\n  }\n\n  // function to update firestore /\n  const handleChange = async () => {\n    const taskDocRef = doc(db, 'notas', id)\n    try{\n      await updateDoc(taskDocRef, {\n        completed: checked\n      })\n    } catch (err) {\n      alert(err)\n    }\n  }\n\n  // function to delete a document from firstore //\n  const handleDelete = async () => {\n    const taskDocRef = doc(db, 'notas', id)\n    try{\n      await deleteDoc(taskDocRef)\n    } catch (err) {\n      alert(err)\n    }\n  }\n\n\n  return (\n    <div className={`task ${checked && 'task--borderColor'}`}>\n      <div className='task__body'>\n        <input value={title}/>\n        <p>{description}</p>\n        <div className='task__buttons'>\n          <div className='task__deleteNedit'>\n            <button \n              className='task__editButton' \n              onClick={() => setOpen({...open, edit : true})}>\n              Editar\n            </button>\n            <button className='task__deleteButton' onClick={handleDelete}>Delete</button>\n          </div>\n        </div>\n      </div>\n\n{open.edit &&\n        <EditTask \n          onClose={handleClose} \n          toEditTitle={title} \n          toEditDescription={description} \n          open={open.edit}\n          id={id} />\n      }\n    </div>\n  )\n}\n\nexport default Task\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["useState","EditTask","doc","updateDoc","deleteDoc","db","React","Task","id","title","description","completed","toEditTitle","toEditDescription","modalIsOpen","setIsOpen","openModal","closeModal","checked","setChecked","open","setOpen","edit","view","handleClose","handleDelete","taskDocRef","err","alert"],"sources":["/Users/mac/Documents/Lim17-lab-note/src/components/EnterApp/Home/Task.js"],"sourcesContent":["import {useState} from 'react'\n//import TaskItem from './TaskItem'\nimport EditTask from './Crud/Edit.js'\nimport { doc, updateDoc, deleteDoc} from \"firebase/firestore\";\nimport {db} from '../../../firebase/connection.js'\n\nimport React from 'react';\n\nfunction Task({id, title, description, completed, toEditTitle,toEditDescription}) {\n///////\nconst [modalIsOpen, setIsOpen] = React.useState(false);\n\nfunction openModal() {\n  setIsOpen(true);\n}\n\nfunction closeModal() {\n  setIsOpen(false);\n}\n//////////\n  const [checked, setChecked] = useState(completed)\n  const [open, setOpen] = useState({edit:false, view:false})\n\n  const handleClose = () => {\n    setOpen({edit:false, view:false})\n  }\n\n  /* function to delete a document from firstore */ \n  const handleDelete = async () => {\n    const taskDocRef = doc(db, 'notas', id)\n    try{\n      await deleteDoc(taskDocRef)\n    } catch (err) {\n      alert(err)\n    }\n  }\n///\n\n///\n  return (\n    <div className={`task ${checked && 'task--borderColor'}`}>\n      <div className='task__body'>\n       <h2>{title}</h2>\n        <p>{description}</p>\n        <div className='task__buttons'>\n          <div className='task__deleteNedit'>\n          <button \n              className='task__editButton' \n              onClick={() => setIsOpen({...open, edit : true})}>\n              Editar\n            </button>\n            <button className='task__deleteButton' onClick={handleDelete}>Delete</button>\n            \n          </div>\n        </div>\n        <br/>\n      </div>\n\n{modalIsOpen.edit &&\n        <EditTask \n          onClose={handleClose} \n          toEditTitle={title} \n          toEditDescription={description} \n          open={modalIsOpen.edit}\n          id={id} />\n      }\n    </div>\n  )\n}\n\n\nexport default Task\n\n\n/*\nimport {useState} from 'react'\n//import TaskItem from './TaskItem'\nimport EditTask from './Crud/Edit.js'\nimport { doc, updateDoc, deleteDoc} from \"firebase/firestore\";\nimport {db} from '../../../firebase/connection.js'\n\nfunction Task({id, title, description, completed, toEditTitle,toEditDescription}) {\n\n  const [checked, setChecked] = useState(completed)\n  const [open, setOpen] = useState({edit:false, view:false})\n\n  const handleClose = () => {\n    setOpen({edit:false, view:false})\n  }\n\n  // function to update firestore /\n  const handleChange = async () => {\n    const taskDocRef = doc(db, 'notas', id)\n    try{\n      await updateDoc(taskDocRef, {\n        completed: checked\n      })\n    } catch (err) {\n      alert(err)\n    }\n  }\n\n  // function to delete a document from firstore //\n  const handleDelete = async () => {\n    const taskDocRef = doc(db, 'notas', id)\n    try{\n      await deleteDoc(taskDocRef)\n    } catch (err) {\n      alert(err)\n    }\n  }\n\n\n  return (\n    <div className={`task ${checked && 'task--borderColor'}`}>\n      <div className='task__body'>\n        <input value={title}/>\n        <p>{description}</p>\n        <div className='task__buttons'>\n          <div className='task__deleteNedit'>\n            <button \n              className='task__editButton' \n              onClick={() => setOpen({...open, edit : true})}>\n              Editar\n            </button>\n            <button className='task__deleteButton' onClick={handleDelete}>Delete</button>\n          </div>\n        </div>\n      </div>\n\n{open.edit &&\n        <EditTask \n          onClose={handleClose} \n          toEditTitle={title} \n          toEditDescription={description} \n          open={open.edit}\n          id={id} />\n      }\n    </div>\n  )\n}\n\nexport default Task\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module"}